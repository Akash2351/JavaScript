JS is lightweight, cross platform, OO programming language
released in 1995..
ECMAScript 1, 1st standard 1997
EcmaScript 5:  ES5 2009
ES6, ES2015 : not much browser support 2016 ...should be good now


JS Basics:

<script src="script.js"></script>
<script>
    console.log('hello world');
</script>

Variables/data types:
primitive data types (not objects): Number, String, Boolean,
 Undefined - value assigned to a variable which does not have a value yet, Null
Js has dynamic typing

// single line comment
/* ... */ multi line comment

Operators:
*, - , + ,++ , -- ,&&, ||, ! ...

If else:
var fullAge = true;

if(fullAge) {
    console.log(" he is an adult");
} else {
    console.log("He is still a child");
}

=== checks for value and type (does not do type co ercion)
== checks for only value and not type (does type coercion - convert one type to another)

var job = 'teacher';

switch(job) {
    case 'teacher' :
        console.log('He is a teacher');
        break;
    case 'driver' :
        console.log('He is a driver');
        break;
    default :
         console.log('He is a human being');
}

coding challenge 1:
var height1 = 180;
var height2 = 160;
var age1 = 22;
var age2 = 25;

var score1 = height1 + age1*5;
var score2 = height2 + age2*5;

if(score1 > score2){
    console.log("player 1 won the game");
} else if( score1 < score2){
    console.log("player 2 won the game");
} else {
    console.log("Both players have same score!");
}

Functions:
function calculateAge(yearOfBirth){
    var age = 2018 - yearOfBirth;
    return age;
}

var age = calculateAge(1990);
console.log(age);

Statements and expressions:
function statement: -> function name1() { ... }
function expression: var name1 = function() {...}

Arrays:
var names = ['john','jim','mark'];
var years = [1990,'john',1989];
var age = new Array(21,23,28);

console.log(names) - > ['john','jim','mark']
console.log(names)[0] - > john

names.push(..) ..adds element to end of array;
names.unshift(..) ...adds to the beginning of array;
names.pop() .. removes an element from the end of array
names.shift() ..removes the first element from array
names.indexOf(..)  returns the index of element passed

Objects and properties:
object - key value pairs...
order does not matter in object

var john = {
    name: 'John',
    age: 25,
    profession: 'teacher'
};

console.log(john.name);
console.log(john['name']); //inside brackets, it should be string
var nme = 'name';
console.log(john[nme]);

var jane = new Object();
jane.name = 'Jane';
jane.age  = 23;
jane['job'] = 'driver';
console.log(jane);

functions in objects:
var john = {
    name: 'John',
    age: 25,
    profession: 'teacher'
    calculateAge: function(yearOfBirth){
        var temp = 2018 - yearOfBirth;
        return temp;
        //access parent object variable using this.age, this.profession
    }
};
console.log(john.calculateAge(1990));

Loops:

for(var i =0; i< 10; i++){
    console.log(i);
}

Coding Challenge 2:
var years = [1990,1999,1987,2004];
var res = [];

function calculateAge(years){
    var ages = [];
    for(var i=0; i<years.length; i++){
        ages[i] = 2018 - years[i];
        if(ages[i] > 18){
            res[i] = true;
        } else {
            res[i] = false;
        }
     console.log('Age:'+ages[i]+' res:'+res[i]);
     return res;
}

Hoisting:
works:
calAge(1996);
function calAge(dob){
    console.log(2018-dob);
}

does not work: function expressions
calAge2(1886);
var calAge2 = function(dob){
    console.log(2018-dob);
}

this keyword, globally points to window object
inside the function, regular function call, it also points to window objects..
inside object, this points to the object

DOM model:
document object model
document.querySelector() ...
document.querySelector('#score-0').textContent = val;
document.querySelector('#score-0').innerHtml ='<em>' + val + '</em>';
document.querySelector('.dice').style.display = 'none';
document.querySelector('.btn-roll').addEventListener('click', function() {
 ....
 });

document.querySelector('.btn-roll').classList.remove('active');
document.querySelector('.btn-roll').classList.add('active');
document.querySelector('.btn-roll').classList.toggle('active');

Objects and functions:

Everything other than primitives are objects..
like arrays, functions, dates,...

Constructor (like blueprint) - > like class, we can create instances..
Inheritance - based on prototype property.
    add methods to its prototype property for the base object.
    so all its instances wil have the methods.

    Prototype chain:
    John (Instance) - > Person blueprint class - > Object Class

    Every JS object has a prototype prototype
    Prototype property is where we put all properties and methods,
    that we want other objects to inherit.

Function constructor - to create class...blueprint
Starts with cap Letter.

var Person = function(name,yearOfBirth,job) {
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    this.job = job;
    this.calculateAge = 2016 - this.yearOfBirth;
    this.printInfo = function(){
        console.log(this.name+','+this.yearOfBirth);
    }
};

var John = new Person('John',1990,'teacher');

adding methods..
Person.prototype.displayAge = function(){
    console.log(this.calculateAge);
}

Person.prototype.lastName = 'Smith';

John.displayAge();
John instanceof Person -> true

Creating objects:
Other way - > Object.create
var personProto = {
    calculateAge = function(){
        console.log(2016 - this.yearOfBirth);
    }
};

var john = Object.create(personProto);
john.name = 'John';
john.yearOfBirth = 1998;

var jane = Object.create(personProto,
    {
        name: { value:'Jane' },
        yearOfBirth: { value: 1990 }
    });

primitives Vs Objects:
for objects, its always a reference to the objects in the memory
variables are directly pointed to actual value.. no reference
for primitives, the values are copied...for objects, its reference
is copied...


var obj1 = {
    age:20,
    name: 'John'
    };

var obj2 = obj1;
    obj2.age = 30;

    console.log(obj1.age);  //30
    console.log(obj2.age);  //30

Callback functions:
functions that are passed to other functions that are called at a
later time.

/////////////////////////////
// Lecture: Passing functions as arguments
/*
var years = [1990, 1965, 1937, 2005, 1998];

function arrayCalc(arr, fn) {
    var arrRes = [];
    for (var i = 0; i < arr.length; i++) {
        arrRes.push(fn(arr[i]));
    }
    return arrRes;
}

function calculateAge(el) {
    return 2016 - el;
}

function isFullAge(el) {
    return el >= 18;
}

function maxHeartRate(el) {
    if (el >= 18 && el <= 81) {
        return Math.round(206.9 - (0.67 * el));
    } else {
        return -1;
    }
}


var ages = arrayCalc(years, calculateAge);
var fullAges = arrayCalc(ages, isFullAge);
var rates = arrayCalc(ages, maxHeartRate);

console.log(ages);
console.log(rates);
*/



/////////////////////////////
// Lecture: Functions returning functions
/*
function interviewQuestion(job) {
    if (job === 'designer') {
        return function(name) {
            console.log(name + ', can you please explain what UX design is?');
        }
    } else if (job === 'teacher') {
        return function(name) {
            console.log('What subject do you teach, ' + name + '?');
        }
    } else {
        return function(name) {
            console.log('Hello ' + name + ', what do you do?');
        }
    }
}

var teacherQuestion = interviewQuestion('teacher');
var designerQuestion = interviewQuestion('designer');


teacherQuestion('John');
designerQuestion('John');
designerQuestion('jane');
designerQuestion('Mark');
designerQuestion('Mike');

interviewQuestion('teacher')('Mark');
*/

/////////////////////////////
// Lecture: Closures
/*
function retirement(retirementAge) {
    var a = ' years left until retirement.';
    return function(yearOfBirth) {
        var age = 2016 - yearOfBirth;
        console.log((retirementAge - age) + a);
    }
}

var retirementUS = retirement(66);
var retirementGermany = retirement(65);
var retirementIceland = retirement(67);

retirementGermany(1990);
retirementUS(1990);
retirementIceland(1990);

//retirement(66)(1990);


function interviewQuestion(job) {
    return function(name) {
        if (job === 'designer') {
            console.log(name + ', can you please explain what UX design is?');
        } else if (job === 'teacher') {
            console.log('What subject do you teach, ' + name + '?');
        } else {
            console.log('Hello ' + name + ', what do you do?');
        }
    }
}

interviewQuestion('teacher')('John');
*/



/////////////////////////////
// Lecture: Bind, call and apply
/*
var john = {
    name: 'John',
    age: 26,
    job: 'teacher',
    presentation: function(style, timeOfDay) {
        if (style === 'formal') {
            console.log('Good ' + timeOfDay + ', Ladies and gentlemen! I\'m ' +  this.name + ', I\'m a ' + this.job + ' and I\'m ' + this.age + ' years old.');
        } else if (style === 'friendly') {
            console.log('Hey! What\'s up? I\'m ' +  this.name + ', I\'m a ' + this.job + ' and I\'m ' + this.age + ' years old. Have a nice ' + timeOfDay + '.');
        }
    }
};

var emily = {
    name: 'Emily',
    age: 35,
    job: 'designer'
};

john.presentation('formal', 'morning');

john.presentation.call(emily, 'friendly', 'afternoon');

//john.presentation.apply(emily, ['friendly', 'afternoon']);

var johnFriendly = john.presentation.bind(john, 'friendly');

johnFriendly('morning');
johnFriendly('night');

var emilyFormal = john.presentation.bind(emily, 'formal');
emilyFormal('afternoon');


// Another cool example
var years = [1990, 1965, 1937, 2005, 1998];

function arrayCalc(arr, fn) {
    var arrRes = [];
    for (var i = 0; i < arr.length; i++) {
        arrRes.push(fn(arr[i]));
    }
    return arrRes;
}

function calculateAge(el) {
    return 2016 - el;
}

function isFullAge(limit, el) {
    return el >= limit;
}

var ages = arrayCalc(years, calculateAge);
var fullJapan = arrayCalc(ages, isFullAge.bind(this, 20));
console.log(ages);
console.log(fullJapan);
*/

Modules:
Module pattern..private, public data, encapsulation and seperation of concerns

var controller = (function(){
    var x = 23;
    var add = function(a){
        return a+x;
    }

     return {
        publicTest: function(b){
            console.log(add(b));
        }
     }

})();

controller.x;  //undefined
controller.publicTest(5);  //works






